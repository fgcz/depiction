from pathlib import Path


ALL_SAMPLES = [p.name for p in Path("raw").iterdir() if p.is_dir()]


rule read_ome_tiff:
    input:
        tiff="raw/{sample}/images_default.ome.tiff",
    output:
        hdf5="work/{sample}/images_default.hdf5",
    shell:
        "python -m depiction.tools.ometiff_to_hdf5 {input.tiff} {output.hdf5}"


rule cluster_generic:
    input:
        hdf5="work/{sample}/images_default.hdf5",
    output:
        hdf5="work/{sample}/cluster_{method}_{method_params}.hdf5",
    shell:
        "python -m depiction.tools.clustering "
        " --input-hdf5 {input.hdf5}"
        " --output-hdf5 {output.hdf5}"
        " --method {wildcards.method}"
        " --method-params {wildcards.method_params}"


rule render_cluster_png:
    input:
        hdf5="work/{sample}/cluster_{variant}.hdf5",
    output:
        png="work/{sample}/cluster_{variant}.png",
    shell:
        "python -m depiction_cluster_sandbox.workflow.proc.render_single_channel_png"
        " {input.hdf5} {output.png}"


rule render_cluster_umap_png:
    input:
        hdf5="work/{sample}/cluster_{variant}.hdf5",
    output:
        png="work/{sample}/cluster-umap_{variant}.png",
    shell:
        "python -m depiction_cluster_sandbox.workflow.proc.render_umap_png"
        " {input.hdf5} {output.png}"


rule concatenate_input_images:
    priority: 100
    input:
        hdf5=expand("work/{sample}/images_default.hdf5", sample=ALL_SAMPLES),
    output:
        hdf5="work/concatenated/images_default.hdf5",
    shell:
        "python -m depiction_cluster_sandbox.workflow.proc.concatenate_images "
        " {output.hdf5} {input.hdf5}"


rule compute_image_umap_coefs:
    input:
        hdf5="work/{sample}/images_{variant}.hdf5",
    output:
        hdf5="work/{sample}/images_{variant}.umap.hdf5",
    shell:
        "python -m depiction_cluster_sandbox.workflow.proc.compute_image_umap_coefs"
        " {input.hdf5} {output.hdf5}"


rule visualize_cluster_umap_coefs:
    input:
        umap_hdf5="work/{sample}/images_default.umap.hdf5",
        cluster_hdf5="work/{sample}/cluster_{variant}.hdf5",
    output:
        png="work/{sample}/cluster-umap2-{variant}.png",
    shell:
        "python -m depiction_cluster_sandbox.workflow.visualize.visualize_cluster_umap_coefs "
        " {input.umap_hdf5} {input.cluster_hdf5} {output.png}"
